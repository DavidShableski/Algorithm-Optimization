<!--David Shableski-->
<!--7/20/2024-->
<!--This document is a review of what i learned in CSC 290 about algorithms and their implementation-->

<!DOCTYPE html>
<html>
  <head>
    <title>David Shableski's Algorithm Optimization</title>
  </head>
  <body>
    <h1>David Shableski's Algorithm Optimization</h1>
    <h3>Make Sure To Open The Console</h3>
    <div>
      <button onclick="sortArray('quicksort')">Quicksort</button>
      <button onclick="sortArray('mergesort')">Mergesort</button>
      <button onclick="sortArray('heapsort')">Heapsort</button>
    </div>
    <div>
      <label for="algorithm">Choose Pathfinding Algorithm:</label>
      <select id="algorithm" onchange="changeAlgorithm()">
        <option value="aStar">A*</option>
        <option value="dijkstra">Dijkstra</option>
      </select>
    </div>

    <script>
      // Quicksort
      function quicksort(arr) {
        if (arr.length <= 1) {
          return arr;
        }
        let pivot = arr[Math.floor(arr.length / 2)];
        let left = arr.filter((x) => x < pivot);
        let middle = arr.filter((x) => x === pivot);
        let right = arr.filter((x) => x > pivot);
        return quicksort(left).concat(middle, quicksort(right));
      }

      // Mergesort
      function mergesort(arr) {
        if (arr.length <= 1) {
          return arr;
        }
        const mid = Math.floor(arr.length / 2);
        const left = arr.slice(0, mid);
        const right = arr.slice(mid);

        return merge(mergesort(left), mergesort(right));
      }

      function merge(left, right) {
        let result = [];
        let leftIndex = 0;
        let rightIndex = 0;

        while (leftIndex < left.length && rightIndex < right.length) {
          if (left[leftIndex] < right[rightIndex]) {
            result.push(left[leftIndex]);
            leftIndex++;
          } else {
            result.push(right[rightIndex]);
            rightIndex++;
          }
        }

        return result
          .concat(left.slice(leftIndex))
          .concat(right.slice(rightIndex));
      }

      // Heapsort
      function heapsort(arr) {
        let n = arr.length;

        for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {
          heapify(arr, n, i);
        }

        for (let i = n - 1; i >= 0; i--) {
          [arr[0], arr[i]] = [arr[i], arr[0]];
          heapify(arr, i, 0);
        }

        return arr;
      }

      function heapify(arr, n, i) {
        let largest = i;
        let left = 2 * i + 1;
        let right = 2 * i + 2;

        if (left < n && arr[left] > arr[largest]) {
          largest = left;
        }

        if (right < n && arr[right] > arr[largest]) {
          largest = right;
        }

        if (largest !== i) {
          [arr[i], arr[largest]] = [arr[largest], arr[i]];
          heapify(arr, n, largest);
        }
      }

      // A* Algorithm
      class Node {
        constructor(x, y, g, h, parent) {
          this.x = x;
          this.y = y;
          this.g = g; // Cost from start to current node
          this.h = h; // Heuristic cost to end node
          this.f = g + h; // Total cost
          this.parent = parent;
        }
      }

      function aStar(start, end, grid) {
        let openList = [];
        let closedList = new Set();
        openList.push(
          new Node(start.x, start.y, 0, heuristic(start, end), null)
        );

        while (openList.length > 0) {
          let current = openList.sort((a, b) => a.f - b.f).shift();
          closedList.add(`${current.x},${current.y}`);

          if (current.x === end.x && current.y === end.y) {
            return reconstructPath(current);
          }

          for (let neighbor of getNeighbors(current, grid)) {
            if (closedList.has(`${neighbor.x},${neighbor.y}`)) {
              continue;
            }

            let tentative_g = current.g + 1;
            let neighborNode = openList.find(
              (node) => node.x === neighbor.x && node.y === neighbor.y
            );

            if (!neighborNode) {
              neighborNode = new Node(
                neighbor.x,
                neighbor.y,
                tentative_g,
                heuristic(neighbor, end),
                current
              );
              openList.push(neighborNode);
            } else if (tentative_g < neighborNode.g) {
              neighborNode.g = tentative_g;
              neighborNode.f = tentative_g + neighborNode.h;
              neighborNode.parent = current;
            }
          }
        }

        return [];
      }

      function heuristic(node, end) {
        return Math.abs(node.x - end.x) + Math.abs(node.y - end.y);
      }

      function getNeighbors(node, grid) {
        let neighbors = [];
        let directions = [
          { x: 0, y: -1 },
          { x: 0, y: 1 },
          { x: -1, y: 0 },
          { x: 1, y: 0 },
        ];

        for (let dir of directions) {
          let x = node.x + dir.x;
          let y = node.y + dir.y;

          if (
            x >= 0 &&
            x < grid[0].length &&
            y >= 0 &&
            y < grid.length &&
            grid[y][x] === 0
          ) {
            neighbors.push({ x, y });
          }
        }

        return neighbors;
      }

      function reconstructPath(node) {
        let path = [];
        while (node) {
          path.push({ x: node.x, y: node.y });
          node = node.parent;
        }
        return path.reverse();
      }

      // Dijkstra's Algorithm //7-19-24
      class DijkstraNode {
        constructor(x, y, cost, parent) {
          this.x = x;
          this.y = y;
          this.cost = cost;
          this.parent = parent;
        }
      }

      function dijkstra(start, end, grid) {
        let openList = [];
        let closedList = new Set();
        openList.push(new DijkstraNode(start.x, start.y, 0, null));

        while (openList.length > 0) {
          let current = openList.sort((a, b) => a.cost - b.cost).shift();
          closedList.add(`${current.x},${current.y}`);

          if (current.x === end.x && current.y === end.y) {
            return reconstructDijkstraPath(current);
          }

          for (let neighbor of getNeighbors(current, grid)) {
            if (closedList.has(`${neighbor.x},${neighbor.y}`)) {
              continue;
            }

            let tentative_cost = current.cost + 1;
            let neighborNode = openList.find(
              (node) => node.x === neighbor.x && node.y === neighbor.y
            );

            if (!neighborNode) {
              neighborNode = new DijkstraNode(
                neighbor.x,
                neighbor.y,
                tentative_cost,
                current
              );
              openList.push(neighborNode);
            } else if (tentative_cost < neighborNode.cost) {
              neighborNode.cost = tentative_cost;
              neighborNode.parent = current;
            }
          }
        }

        return [];
      }

      function reconstructDijkstraPath(node) {
        let path = [];
        while (node) {
          path.push({ x: node.x, y: node.y });
          node = node.parent;
        }
        return path.reverse();
      }

      // Visualization with p5.js
      const cols = 20;
      const rows = 20;
      let grid = new Array(rows);
      let start = { x: 0, y: 0 };
      let end = { x: cols - 1, y: rows - 1 };
      let path = [];
      let currentAlgorithm = "aStar";

      function setup() {
        createCanvas(400, 400);
        for (let i = 0; i < rows; i++) {
          grid[i] = new Array(cols).fill(0);
        }
        grid[10][10] = 1; // Example obstacle
        path = aStar(start, end, grid);
      }

      function draw() {
        background(220);
        let w = width / cols;
        let h = height / rows;

        for (let i = 0; i < rows; i++) {
          for (let j = 0; j < cols; j++) {
            if (grid[i][j] === 1) {
              fill(0);
            } else {
              fill(255);
            }
            stroke(0);
            rect(j * w, i * h, w, h);
          }
        }

        for (let node of path) {
          fill(0, 255, 0);
          rect(node.x * w, node.y * h, w, h);
        }
      }

      function changeAlgorithm() {
        currentAlgorithm = document.getElementById("algorithm").value;
        if (currentAlgorithm === "aStar") {
          path = aStar(start, end, grid);
        } else if (currentAlgorithm === "dijkstra") {
          path = dijkstra(start, end, grid);
        }
      }

      function sortArray(algorithm) {
        let array = [5, 3, 8, 4, 2, 1, 7, 6];
        console.log(`Original array: ${array}`);
        let sortedArray;
        if (algorithm === "quicksort") {
          sortedArray = quicksort(array);
        } else if (algorithm === "mergesort") {
          sortedArray = mergesort(array);
        } else if (algorithm === "heapsort") {
          sortedArray = heapsort(array);
        }
        console.log(`Sorted array with ${algorithm}: ${sortedArray}`);
      }
    </script>
  </body>
</html>
